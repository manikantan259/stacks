=====================================
Celebrity Problem Algorithm (Optimal)
=====================================

Input:
- n x n matrix 'mat' where:
  mat[a][b] = 1 if person 'a' knows person 'b'
  mat[a][b] = 0 otherwise

Output:
- Index of celebrity (knows nobody, known by all)
- -1 if no celebrity exists

Algorithm Steps:
----------------
1. INITIALIZATION:
   - left = 0, right = n-1
   
2. ELIMINATION PHASE (O(n)):
   while left < right:
     if mat[left][right] == 1:
       left++    // left knows right → eliminate left
     else:
       right--   // left doesn't know right → eliminate right
   candidate = left

3. VERIFICATION PHASE (O(n)):
   for i from 0 to n-1:
     // Check candidate knows nobody (except self)
     if i ≠ candidate AND mat[candidate][i] == 1:
       return -1
     // Check everyone knows candidate
     if i ≠ candidate AND mat[i][candidate] == 0:
       return -1
   return candidate

Key Properties:
---------------
- Time: O(n) (2 passes)
- Space: O(1)
- Works by elimination then verification

Edge Cases:
-----------
- All zero matrix → no celebrity
- Diagonal matrix → no celebrity
- Multiple possible candidates → verification ensures only one

public int celebrity(int[][] mat) {
    int n = mat.length;
    int left = 0, right = n - 1;
    
    // Elimination phase
    while (left < right) {
        if (mat[left][right] == 1) {
            left++;  // left knows right → left cannot be celebrity
        } else {
            right--; // left doesn't know right → right cannot be celebrity
        }
    }
    int candidate = left;
    
    // Verification phase
    for (int i = 0; i < n; i++) {
        // Check if candidate knows anyone else
        if (i != candidate && mat[candidate][i] == 1) {
            return -1;
        }
        // Check if everyone knows the candidate
        if (i != candidate && mat[i][candidate] == 0) {
            return -1;
        }
    }
    return candidate;
}