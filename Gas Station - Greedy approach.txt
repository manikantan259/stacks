Gas Station Problem Algorithm
Problem Statement:
Given gas[i] (gas available at station i) and cost[i] (gas needed to go to station i+1), find the starting station to complete a circular route. Return -1 if impossible.

Algorithm Steps
Check Feasibility

If total_gas < total_cost, return -1 (not enough gas for the trip).

Otherwise, proceed to find the starting station.

Greedy Search for Start Station

Initialize start = 0 and current_gas = 0.

For each station i:

Add gas[i] - cost[i] to current_gas.

If current_gas < 0:

Reset start = i + 1 (move start to next station).

Reset current_gas = 0.

Return start (guaranteed to work if total_gas >= total_cost).

Why It Works
Feasibility Check: Ensures the total gas can cover the total cost.

Greedy Selection: If current_gas turns negative at station i, all stations before i cannot be the starting point.

Time Complexity:
O(N) (single pass through the array).

Space Complexity:
O(1) (constant extra space).




class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int start = 0;
        int totalGas = 0;
        int totalCost = 0;
        int currentGas = 0;

        for (int val : gas) {
            totalGas += val;
        }
        for (int ele : cost) {
            totalCost += ele;  // Fixed: using ele instead of cost
        }

        if (totalGas < totalCost) return -1;

        for (int i = 0; i < gas.length; i++) {
            currentGas = currentGas + gas[i] - cost[i];
            if (currentGas < 0) {
                start = i + 1;
                currentGas = 0;
            }
        }
        return start;
    }
}