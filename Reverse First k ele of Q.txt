import java.util.Queue;
import java.util.LinkedList;
import java.util.Stack;

class Solution {
    public Queue<Integer> reverseFirstK(Queue<Integer> queue, int k) {
        if (queue.isEmpty() || k <= 0 || k > queue.size()) {
            return queue;
        }

        Stack<Integer> stack = new Stack<>();

        // Step 1: Push the first K elements into the stack
        for (int i = 0; i < k; i++) {
            stack.push(queue.poll());
        }

        // Step 2: Pop elements from the stack and enqueue them back into the queue
        while (!stack.isEmpty()) {
            queue.offer(stack.pop());
        }

        // Step 3: Move the remaining (N-K) elements to the back of the queue
        for (int i = 0; i < queue.size() - k; i++) {
            queue.offer(queue.poll());
        }

        return queue;
    }
}