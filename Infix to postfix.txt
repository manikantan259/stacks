class Solution {
   public static String infixToPostfix(String s) {
    StringBuilder result = new StringBuilder();
    Stack<Character> stack = new Stack<>();
    
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        
        // Case 1: Operand (letter or digit)
        if (Character.isLetterOrDigit(c)) {
            result.append(c);  // Directly add to output
        }
        
        // Case 2: Opening parenthesis
        else if (c == '(') {
            stack.push(c);  // Always push '(' to stack
        }
        
        // Case 3: Closing parenthesis
        else if (c == ')') {
            // Pop and append until '(' is found
            while (!stack.isEmpty() && stack.peek() != '(') {
                result.append(stack.pop());
            }
            stack.pop();  // Remove the '(' itself
        }
        
        // Case 4: Operator (+, -, *, /, ^)
        else {
            // Pop operators with higher/equal precedence
            while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())) {
                result.append(stack.pop());
            }
            stack.push(c);  // Push current operator
        }
    }
    
    // Pop remaining operators
    while (!stack.isEmpty()) {
        result.append(stack.pop());
    }
    
    return result.toString();
}

private static int precedence(char ch) {
    switch (ch) {
        case '+': case '-': return 1;  // Lowest
        case '*': case '/': return 2;  // Medium
        case '^': return 3;            // Highest
    }
    return -1;  // For non-operators
}
}